CREATE TABLE IF NOT EXISTS mpa (
                        mpa_id INTEGER PRIMARY KEY,
                        mpa_name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS films
(
    film_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name    varchar(255) NOT NULL,
    description  varchar(200),
    release_date date         NOT NULL,
    duration     int          NOT NULL,
    mpa_id       int
    );

CREATE TABLE IF NOT EXISTS genres
(
    genre_id   INTEGER PRIMARY KEY,
    genre_name varchar(255) NOT NULL UNIQUE
    );

CREATE TABLE IF NOT EXISTS genre_vs_film
(
    film_id  INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    genre_id int REFERENCES genres (genre_id) ON DELETE RESTRICT,
    PRIMARY KEY (film_id, genre_id)
    );

CREATE TABLE IF NOT EXISTS users
(
    user_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    varchar(255) NOT NULL UNIQUE,
    login    varchar(255) NOT NULL,
    user_name     varchar(255),
    birthday date
    );

CREATE TABLE IF NOT EXISTS likes_vs_film
(
    film_id  INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
    );

CREATE TABLE IF NOT EXISTS friends_vs_users
(
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE
    );

DROP TABLE IF EXISTS EVENTS CASCADE;
CREATE TABLE EVENTS (
    event_id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES APP_USERS (USER_ID) ON DELETE CASCADE,
    event_type CHARACTER VARYING(45) NOT NULL,
    operation CHARACTER VARYING(45) NOT NULL,
    entity_id INTEGER NOT NULL,
    event_timestamp TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    CONSTRAINT "EVENTS_EVENT_TYPE_check" CHECK (EVENT_TYPE::text IN ('LIKE', 'REVIEW', 'FRIEND')),
    CONSTRAINT "EVENTS_OPERATION_check" CHECK (OPERATION::text IN ('REMOVE', 'ADD', 'UPDATE'))
);
